/* eslint-disable react-hooks/exhaustive-deps */
import type { NextPage } from 'next';
import { useState, useEffect } from "react";
import Head from 'next/head'
import Image from 'next/image'
import Products from "../components/products";
import { useQuery, QueryClient } from "react-query";

const fetchProductListFromAPI = async (page: number) => {
  const res = await fetch(`https://dummyjson.com/products?limit=10&skip=${page}`);
  return  res.json();
}

const SearchProductListFromAPI = async (phrase: string) => {
  const res = await fetch(`https://dummyjson.com/products/search?q=${phrase}`);
  return  res.json();
}




const Home = () => {
  const [grid, setGrid] = useState('grid4');
  const [page, setPage] = useState(0);

  const [sortBy, setSort] = useState('ASC');
  const [searched, setSearched] = useState("");
  const [dataSort, setDataSorted]= useState([]);
  const [dataSearchSort, setDataSearchSorted]= useState([]);


  const queryClient = new QueryClient();
  
  function handleSwitchGrid(value: string) {
    setGrid(value)
  }

  const { data, isLoading, isError, error, isFetching, isPreviousData } = useQuery<any, Error>(['products', page],
  () => fetchProductListFromAPI(page), { keepPreviousData: true, staleTime: 5000 });

  const { data: search, isLoading: searchLoading, isError: sError, error: rError, isFetching: sFetch, isPreviousData: oldData } = useQuery<any, Error>(`search-${searched}`,
  () => SearchProductListFromAPI(searched), { keepPreviousData: true, staleTime: 5000 });


  function addProductBanner() {
    let start = 2;
    let deleteCount = 0;
    let element = {
      brand: "Impression of Acqua Di Gio",
      category: "fragrances",
      description: "Mega Discount, Impression of Acqua Di Gio by GiorgioArmani concentrated attar perfume Oil",
      discountPercentage: 8.4,
      id: 11,
      images: ["https://dummyjson.com/image/i/products/11/1.jpg", "https://dummyjson.com/image/i/products/11/2.jpg"],
      price: 13,
      rating: 4.26,
      stock: 65,
      thumbnail: "https://dummyjson.com/image/i/products/11/thumbnail.jpg",
      title: "perfume Oil"
    };

    dataSort?.splice(start, deleteCount, element);
  }
  

    useEffect(() => {
      addProductBanner()

      if (sortBy === "ASC") {
          let dataSorted = data?.products?.sort((a: { price: number; }, b: { price: number; }) => a.price - b.price);
          setDataSorted(dataSorted);
          let dataSearchSorted = search?.products?.sort((a: { price: number; }, b: { price: number; }) => a.price - b.price);
          setDataSearchSorted(dataSearchSorted);
      }
      else {
          let dataSorted = data?.products?.sort((a: { price: number; }, b: { price: number; }) => a.price - b.price).reverse();
          setDataSorted(dataSorted);
          let dataSearchSorted = search?.products?.sort((a: { price: number; }, b: { price: number; }) => a.price - b.price).reverse();
          setDataSearchSorted(dataSearchSorted);
      }
    }, [data, search, sortBy])


    // Prefetch the next page!
    useEffect(() => {
      if (page < data?.total) {
        queryClient.prefetchQuery(['projects', page + 10], () =>
        fetchProductListFromAPI(page + 10)
        )
      }
    }, [data, page, queryClient])



  function SwitchGrid (grid: string) {
    switch (grid) {
      case 'grid2':
        return 'sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-2'
      case 'grid3':
        return 'sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3'
      case 'grid4':
        return 'sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
      case 'grid5':
        return 'sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5'
      default:
        return 'sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
    }
  }



  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className="bg-white">
        <div className={'mx-auto max-w-2xl py-16 px-4 sm:py-24 sm:px-6 lg:max-w-7xl lg:px-8'}>
        
        {/* {banner.position === "top" && <>banner</>} */}

        <div className="mb-10 mt-5">
            <div className="md:flex md:flex-row block justify-between">
                <h2 className="h-10">Products</h2>
            
                <div className="flex justify-between">
                  <select defaultValue={sortBy} onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setSort(e.target.value)} className="bg-slate-50 border border-slate-300 text-slate-900 text-sm rounded-lg h-10 focus:ring-blue-500 focus:border-blue-500 block p-2.5">
                    <option value="ASC">Sort By Highest Price</option>
                    <option value="DESC">Sort By Lowest Price</option>
                  </select>

               
                  <select defaultValue={grid} onChange={(e: React.ChangeEvent<HTMLSelectElement>,): void => handleSwitchGrid(e.target.value)} 
                    className="bg-transparent border-0 ml-5 text-slate-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 h-10 block p-2.5">
                    <option value="grid2">2 per row</option>
                    <option value="grid3">3 per row</option>
                    <option value="grid4">4 per row</option>
                  </select>
                
                </div>
            </div>

            <form className="mt-5">   
                <label htmlFor="default-search" className="mb-2 text-sm font-medium text-slate-900 sr-only">Search</label>
                <div className="relative">
                    <div className="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
                        <svg aria-hidden="true" className="w-5 h-5 text-slate-500 dark:text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                    </div>
                    <input type="search" id="default-search" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearched(e.target.value)} className="block p-4 pl-10 w-full text-sm text-slate-900 bg-slate-50 rounded-lg outline-0 border border-slate-300 focus:ring-blue-500 focus:border-blue-500" placeholder="Search products..." required />
                    <span className="text-white absolute border-0 right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2">auto search</span>
                </div>
            </form>
        </div>


         <div className={"grid grid-cols-2 gap-y-10 gap-x-6  xl:gap-x-8" + SwitchGrid(grid)}>
          
         {isLoading && searchLoading ? (
             <>
              <div role="status" className="max-w-sm animate-pulse">
                <div className="h-[16rem] bg-slate-200 rounded-md dark:bg-slate-700 w-full mb-4"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[360px] mb-2.5"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 mb-2.5"></div>
                <div className="h-4 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[330px] mb-2.5"></div>
                <span className="sr-only">Loading...</span>
            </div>

            <div role="status" className="max-w-sm animate-pulse">
                <div className="h-[16rem] bg-slate-200 rounded-md dark:bg-slate-700 w-full mb-4"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[360px] mb-2.5"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 mb-2.5"></div>
                <div className="h-4 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[330px] mb-2.5"></div>
                <span className="sr-only">Loading...</span>
            </div>

            <div role="status" className="max-w-sm animate-pulse">
                <div className="h-[16rem] bg-slate-200 rounded-md dark:bg-slate-700 w-full mb-4"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[360px] mb-2.5"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 mb-2.5"></div>
                <div className="h-4 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[330px] mb-2.5"></div>
                <span className="sr-only">Loading...</span>
            </div>

            <div role="status" className="max-w-sm animate-pulse">
                <div className="h-[16rem] bg-slate-200 rounded-md dark:bg-slate-700 w-full mb-4"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[360px] mb-2.5"></div>
                <div className="h-2 bg-slate-200 rounded-full dark:bg-slate-700 mb-2.5"></div>
                <div className="h-4 bg-slate-200 rounded-full dark:bg-slate-700 max-w-[330px] mb-2.5"></div>
                <span className="sr-only">Loading...</span>
            </div>
             </>
            ) : isError && sError ? (
              <p>{error?.message}</p>
            ) : searched === "" ? (
              dataSort?.map((product: any, index: number) => (
                <Products product={product} key={index} />
              ))
        ) : 
        (
            dataSearchSort?.map((product: any, index: number) => (
              <Products product={product} key={index} />
            ))
 
        )
      }
        </div>

      
        {search?.products.length === 0 ? <div className="p-4 text-sm mx-auto w-full text-gray-700 bg-gray-100 rounded-lg text-center" role="alert">
          <span className="font-medium">Unable to find your Item!</span> Hi there, We are unable to find (searched) in our inventory.
        </div> : null}
              

        <div className='w-full mt-10'>
        <div className="text-center text-md font-medium mb-5">Showing products: <span className="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">{page} of {data?.total}</span></div>
            <div className="w-1/4 mx-auto flex justify-center">
                <button
                  className="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-slate-900 focus:outline-none bg-white rounded-lg border border-slate-200 hover:bg-slate-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-slate-200 dark:focus:ring-slate-700 dark:bg-slate-800 dark:text-slate-400 dark:border-slate-600 dark:hover:text-white dark:hover:bg-slate-700"
                  onClick={() => setPage(old => Math.max(old - 10, 0))}
                  disabled={page === 0}
                >
                  Previous Page
                </button>{' '}

                <button
                  className="text-white bg-slate-800 hover:bg-slate-900 focus:outline-none focus:ring-4 focus:ring-slate-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-slate-800 dark:hover:bg-slate-700 dark:focus:ring-slate-700 dark:border-slate-700"
                  onClick={() => {
                    if (!isPreviousData && data?.total) {
                      setPage(old => old + 10)
                    }
                  }}
                  // Disable the Next Page button until we know a next page is available
                  disabled={isPreviousData || !data?.total || page === data?.total - 10}
                >
                  Next Page
                </button>
            </div>
            {isFetching && sFetch ? <div className="text-center text-md font-medium mb-5"> Loading...</div> : null}{' '}
        </div>


      </div>



      {/* {banner.position === "top" && <>banner</>} */}

    </div>
    </div>
  )
}



export default Home
